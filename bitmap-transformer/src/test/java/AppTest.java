/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;

import java.awt.image.BufferedImage;

import static org.junit.Assert.*;

public class AppTest {
    // Tests that .flipVertically() returns an image of the same height as the original
    @Test public void testFlipVerticallyHeight() {
        BufferedImage testImage= new BufferedImage(2, 2, BufferedImage.TYPE_BYTE_BINARY);
        Bitmap bitmap = new Bitmap(testImage);

        assertEquals("Height should be 2", 2, bitmap.flipVertically()[0]);
    }

    // Tests that .grayscale() returns an image of the same width as the original
    @Test public void testFlipVerticallyWidth() {
        BufferedImage testImage= new BufferedImage(3, 3, BufferedImage.TYPE_BYTE_BINARY);
        Bitmap bitmap = new Bitmap(testImage);

        assertEquals("Width should be 2", 3, bitmap.flipVertically()[1]);
    }

    // Tests that .flipHorizontally() returns an image of the same height as the original
    @Test public void testFlipHorizontallyHeight() {
        BufferedImage testImage= new BufferedImage(2, 2, BufferedImage.TYPE_BYTE_BINARY);
        Bitmap bitmap = new Bitmap(testImage);

        assertEquals("Height should be 2", 2, bitmap.flipHorizontally()[0]);
    }

    // Tests that .grayscale() returns an image of the same width as the original
    @Test public void testFlipHorizontallyWidth() {
        BufferedImage testImage= new BufferedImage(3, 3, BufferedImage.TYPE_BYTE_BINARY);
        Bitmap bitmap = new Bitmap(testImage);

        assertEquals("Width should be 2", 3, bitmap.flipHorizontally()[1]);
    }

    // Tests that .grayscale() returns an image of the same height as the original
    @Test public void testGrayscaleHeight() {
        BufferedImage testImage= new BufferedImage(2, 2, BufferedImage.TYPE_BYTE_BINARY);
        Bitmap bitmap = new Bitmap(testImage);

        assertEquals("Height should be 2", 2, bitmap.grayscale()[0]);
    }

    // Tests that .grayscale() returns an image of the same width as the original
    @Test public void testGrayscaleWidth() {
        BufferedImage testImage= new BufferedImage(3, 3, BufferedImage.TYPE_BYTE_BINARY);
        Bitmap bitmap = new Bitmap(testImage);

        assertEquals("Width should be 2", 3, bitmap.grayscale()[1]);
    }

    // Tests that .darken() returns an image of the same height as the original
    @Test public void testDarkenHeight() {
        BufferedImage testImage= new BufferedImage(2, 2, BufferedImage.TYPE_BYTE_BINARY);
        Bitmap bitmap = new Bitmap(testImage);

        assertEquals("Height should be 2", 2, bitmap.darken()[0]);
    }

    // Tests that .darken() returns an image of the same width as the original
    @Test public void testDarkenWidth() {
        BufferedImage testImage= new BufferedImage(3, 3, BufferedImage.TYPE_BYTE_BINARY);
        Bitmap bitmap = new Bitmap(testImage);

        assertEquals("Width should be 2", 3, bitmap.darken()[1]);
    }
}
