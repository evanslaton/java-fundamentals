/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;

import static org.junit.Assert.*;

public class LibraryTest {
    @Test public void testSomeLibraryMethod() {
        Library classUnderTest = new Library();
        assertTrue("someLibraryMethod should return 'true'", classUnderTest.someLibraryMethod());
    }

    @Test public void testRoll() {
        int n = 10;
        assertEquals("Returned array length should be equal to the n parameter passed in", n, Library.roll(n).length);
    }

    @Test public void testContainsDuplicates() {
        int[] testArray = {1,2,3,4,4,6,7,8,9,10};
        int[] testArray2 = {1,2,3,4,5,6,7,8,9,10};
        assertTrue("Should return true", Library.containsDuplicates(testArray));
        assertFalse("Should return false", Library.containsDuplicates(testArray2));
    }

    @Test public void testCalculateAverage() {
        int[] testArray = {97,15,43,50,31,100};
        int testValue = 56;
        assertEquals("Returned value should be 56", testValue, Library.calculateAverage(testArray));
    }

    @Test public void testGetLowestAverageOf() {
        int[][] testArray = {
                {16, 96, 9, 56, 44, 93, 92},
                {58, 47, 6, 37, 44, 83, 82},
                {77, 67, 1, 82, 44, 1, 72},
                {90, 88, 34, 68, 44, 93, 62}
        };

        assertArrayEquals("Arrays should be the same", testArray[2], Library.lowestAverage(testArray));
    }

    /*************** LAB 03 ***************/
//    Will eventually test the printed output once I figure out how that's done
//    @Test public void testPrintMaxMinAbsentValues() {
//
//    }

    @Test public void testGetUniqueValues() {
        int[][] testTwoDimensionalArray = {
                {1, 2, 3, 3, 4, 5, 1},
                {2, 2, 4, 4, 6, 7, 8},
        };

        HashSet<Integer> testHashSet = new HashSet();
        testHashSet.add(1);
        testHashSet.add(2);
        testHashSet.add(3);
        testHashSet.add(4);
        testHashSet.add(5);
        testHashSet.add(6);
        testHashSet.add(7);
        testHashSet.add(8);

        assertEquals("HashSets should be the same", testHashSet, Library.getUniqueValues(testTwoDimensionalArray));
    }

    @Test public void testFindMinimumValue() {
        HashSet<Integer> testHashSet = new HashSet();
        testHashSet.add(1);
        testHashSet.add(2);

        assertEquals("Should return 1", 1, Library.findMinimumValue(testHashSet));
    }

    @Test public void testFindMaximumValue() {
        HashSet<Integer> testHashSet = new HashSet();
        testHashSet.add(1);
        testHashSet.add(2);

        assertEquals("Should return 2", 2, Library.findMaximumValue(testHashSet));
    }

//    Will eventually test the printed output once I figure out how that's done
//    @Test public void testTally() {
//
//    }

    @Test public void testGetVotesForCandidates() {
        List<String> testArrayList = new ArrayList<>();
        testArrayList.add("Bush");
        testArrayList.add("Bush");
        testArrayList.add("Bush");
        testArrayList.add("Shrub");
        testArrayList.add("Hedge");
        testArrayList.add("Shrub");
        testArrayList.add("Bush");
        testArrayList.add("Hedge");
        testArrayList.add("Bush");

        HashMap<String, Integer> testHashMap = new HashMap<>();
        testHashMap.put("Hedge", 2);
        testHashMap.put("Bush", 5);
        testHashMap.put("Shrub", 2);

        assertEquals("HashMaps should be the same", testHashMap, Library.getVotesForCandidates(testArrayList));
    }
}
