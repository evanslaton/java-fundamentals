import java.util.*;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    public static int[] roll(int n) {
        int[] rolls = new int[n];
        for (int i = 0; i < n; i++) {
            rolls[i] = randomNumberGenerator();
        }
        return rolls;
    }

    public static int randomNumberGenerator() {
        return (int) Math.ceil(Math.random() * 6);
    }

    public static boolean containsDuplicates(int[] toCheckForDuplicates) {
        int counter;
        for (int number : toCheckForDuplicates) {
            counter = 0;
            for (int i = 0; i < toCheckForDuplicates.length; i++) {
                if (number == toCheckForDuplicates[i]) { counter++; }
            }
            if (counter > 1) { return true; }
        }
        return false;
    }

    public static int calculateAverage(int[] getAverageOf) {
        double average = 0;
        for (int number : getAverageOf) { average += number; }
        return (int) Math.round(average) / getAverageOf.length;
    }

    public static int[] lowestAverage(int[][] getLowestAverageOf) {
        int arrayLength = getLowestAverageOf[0].length;
        int[] hasLowestAverage = new int[arrayLength];
        int lowestAverage = calculateAverage(getLowestAverageOf[0]);
        int currentAverage;

        for (int[] array : getLowestAverageOf) {
            currentAverage = calculateAverage(array);
            if (currentAverage < lowestAverage) {
                lowestAverage = currentAverage;
                hasLowestAverage = array;
            }
        }
        return hasLowestAverage;
    }

    /*************** LAB 03 ***************/
    // Prints the maximum, minimum and absent values between the minimum and maximum from a HashSet
    public static void printMaxMinAbsentValues(int[][] twoDimensionalArray) {
        HashSet<Integer> uniqueIntegers = getUniqueValues(twoDimensionalArray);
        int maximumValue = findMaximumValue(uniqueIntegers);
        int minimumValue = findMinimumValue(uniqueIntegers);

        System.out.println("Low: " + maximumValue);
        System.out.println("High: " + minimumValue);

        for (int i = minimumValue; i <= maximumValue; i++) {
            if (!uniqueIntegers.contains(i)) {
                System.out.println("Never saw temperature: " + i);
            }
        }
    }

    // Returns all unique Integers from a 2d array in a HashSet
    public static HashSet<Integer> getUniqueValues(int[][] twoDimensionalArray) {
        HashSet<Integer> uniqueIntegers = new HashSet();
        for (int[] arrayOfInts : twoDimensionalArray) {
            for (int value: arrayOfInts) {
                if (!uniqueIntegers.contains(value)) {
                    uniqueIntegers.add(value);
                }
            }
        }
        return uniqueIntegers;
    }

    // Returns the maximum value in a HashSet
    public static int findMinimumValue(HashSet<Integer> uniqueIntegers) {
        return Collections.min(uniqueIntegers);
    }

    // Returns the maximum value in a HashSet
    public static int findMaximumValue(HashSet<Integer> uniqueIntegers) {
        return Collections.max(uniqueIntegers);
    }

    // Prints the candidate's name who has the most votes
    public static void tally(List<String> votes) {
        HashMap<String, Integer> voteCounts = getVotesForCandidates(votes);
        Integer mostVotes = 0;
        Integer candidatesVotes;
        String winner = "";
        for (Map.Entry<String, Integer> candidate : voteCounts.entrySet()) {
            candidatesVotes = candidate.getValue();
            if (candidatesVotes > mostVotes) {
                mostVotes = candidatesVotes;
                winner = candidate.getKey();
            }
        }
        System.out.println(winner + " received the most votes!");
    }

    // Returns a HashMap containing the candidates and their vote tallies
    public static HashMap<String, Integer> getVotesForCandidates(List<String> votes) {
        HashMap<String, Integer> candidatesAndVotes =  new HashMap<>();
        for (String candidate : votes) {
            if (!candidatesAndVotes.containsKey(candidate)) {
                candidatesAndVotes.put(candidate, 1);
            } else {
                candidatesAndVotes.put(candidate, candidatesAndVotes.get(candidate) + 1);
            }
        }
        return candidatesAndVotes;
    }
}
