/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;
import static org.junit.Assert.*;

public class RestaurantTest {
    // Tests for Restaurant class
    @Test
    public void testRestaurantToString() {
        Restaurant restaurant = new Restaurant("Outback Steakhouse", "$$");
        assertEquals("Should be - Name: Outback Steakhouse, Star Rating: No rating yet, Price Category: $$", "Name: Outback Steakhouse, Star Rating: No rating yet, Price Category: $$\n", restaurant.toString());

        restaurant.addReview(new Review("This place is GREAT!", 5, "Joseph Cotton"));
        assertEquals("Should be - Name: Outback Steakhouse, Star Rating: 5, Price Category: $$\nReview: This place is GREAT!, Star Rating: 5, Author: Joseph Cotton\n", "Name: Outback Steakhouse, Star Rating: 5, Price Category: $$\nReview: This place is GREAT!, Star Rating: 5, Author: Joseph Cotton\n", restaurant.toString());
    }

    @Test
    public void testAddReview() {
        Restaurant restaurant = new Restaurant("Chili's","$$");
        restaurant.addReview(new Review("I always leave negative reviews no matter what", 2, "Lonely And Angry"));
        assertEquals("Should be 1", 1, restaurant.reviews.size());

        restaurant.addReview(new Review("I want my babyback babyback babyback ribs.", 4, "Barbi Q. Sawsuh"));
        assertEquals("Should be 2", 2, restaurant.reviews.size());

        restaurant.addReview(new Review("Never actually been there but I know I wouldn't like it", 1, "John Smith"));
        assertEquals("Should be 3", 3, restaurant.reviews.size());
    }

    @Test
    public void testUpdateRestaurantStars() {
        Restaurant restaurant = new Restaurant("Panera Bread", "$$");
        restaurant.updateRestaurantStars(5);
        assertEquals("Should be 5", 5, restaurant.rating);

        restaurant.updateRestaurantStars(1);
        assertEquals("Should be 3", 3, restaurant.rating);

        restaurant.updateRestaurantStars(1);
        assertEquals("Should be 2", 2, restaurant.rating);
    }

    // Tests for Shop class
    @Test
    public void testShopToString() {
        Shop shop = new Shop("Walmart", "If you want good service use the self-checkout", "$");
        assertEquals("Should be - Shop: Walmart, Description: If you want good service use the self-checkout, Price: $", "Shop: Walmart, Description: If you want good service use the self-checkout, Price: $\n", shop.toString());
    }

    @Test
    public void testShopAddReview() {
        Shop shop = new Shop("Forever 31", "Affordable fashion", "$$");

        shop.addReview(new Review("Cheap", 2, "Dwayne Johnson"));
        assertEquals("Should be - Shop: Forever 31, Description: Affordable fashion, Price: $$\nReview: Cheap, Star Rating: 2, Author: Dwayne Johnson\n", "Shop: Forever 31, Description: Affordable fashion, Price: $$\nReview: Cheap, Star Rating: 2, Author: Dwayne Johnson\n", shop.toString());

        shop.addReview(new Review("It has everything I need", 5, "Rebel Wilson"));
        assertEquals("Should be 2", 2, shop.reviews.size());
    }

    // Tests for Theater class
    @Test
    public void testTheaterToString() {
        Theater theater = new Theater("The Theatre");
        assertEquals("Theater: The Theatre, Movies: []\n", "Theater: The Theatre, Movies: []\n", theater.toString());

        theater.addMovie("The Lord of the Rings III: The Return of the King");
        assertEquals("Theater: The Theatre, Movies: [The Lord of the Rings III: The Return of the King]\n", "Theater: The Theatre, Movies: [The Lord of the Rings III: The Return of the King]\n", theater.toString());

        theater.addMovie("The Lord of the Rings II: The Two Towers");
        assertEquals("Theater: The Theatre, Movies: [The Lord of the Rings III: The Return of the King, The Lord of the Rings II: The Two Towers]\n", "Theater: The Theatre, Movies: [The Lord of the Rings III: The Return of the King, The Lord of the Rings II: The Two Towers]\n", theater.toString());

        theater.addReview(new Review("I like the popped corn", 5, "Orville Redenbacker"));
        assertEquals("Theater: The Theatre, Movies: [The Lord of the Rings III: The Return of the King, The Lord of the Rings II: The Two Towers]\nReview: I like the popped corn, Star Rating: 5, Author: Orville Redenbacker\n", "Theater: The Theatre, Movies: [The Lord of the Rings III: The Return of the King, The Lord of the Rings II: The Two Towers]\nReview: I like the popped corn, Star Rating: 5, Author: Orville Redenbacker\n", theater.toString());
    }

    @Test
    public void testTheaterAddMovie() {
        Theater theater = new Theater("Majestic");
        theater.addMovie("Gorillas in the Mist");
        assertTrue("Should be true", theater.currentlyShowingMovies.contains("Gorillas in the Mist"));
        assertEquals("Should be 1", 1, theater.currentlyShowingMovies.size());
        assertEquals("Should be Gorillas in the Mist", "Gorillas in the Mist", theater.currentlyShowingMovies.getFirst());

        theater.addMovie("What\'s Eating Gilbert Grape");
        int location = theater.currentlyShowingMovies.indexOf("What\'s Eating Gilbert Grape");
        assertTrue("Should be true", theater.currentlyShowingMovies.contains("What\'s Eating Gilbert Grape"));
        assertEquals("Should be 2", 2, theater.currentlyShowingMovies.size());
        assertEquals("Should be What\'s Eating Gilbert Grape", "What\'s Eating Gilbert Grape", theater.currentlyShowingMovies.get(location));
    }

    @Test
    public void testTheaterRemoveMovie() {
        Theater theater = new Theater("AMC Lennox 24");
        theater.addMovie("Avatar");
        assertEquals("Should be 1", 1, theater.currentlyShowingMovies.size());
        theater.removeMovie("Avatar");
        assertEquals("Should be 0", 0, theater.currentlyShowingMovies.size());

        theater.addMovie("Napleon Dynamite");
        theater.addMovie("The Secret Life of Walter Mitty");
        theater.addMovie("Being John Malkovich");

        assertEquals("Should be 3", 3, theater.currentlyShowingMovies.size());
        assertTrue("Should be true", theater.currentlyShowingMovies.contains("Napleon Dynamite"));
        assertTrue("Should be true", theater.currentlyShowingMovies.contains("The Secret Life of Walter Mitty"));
        assertTrue("Should be true", theater.currentlyShowingMovies.contains("Being John Malkovich"));

        theater.removeMovie("The Secret Life of Walter Mitty");
        assertEquals("Should be 2", 2, theater.currentlyShowingMovies.size());
        assertFalse("Should be false", theater.currentlyShowingMovies.contains("The Secret Life of Walter Mitty"));
        assertTrue("Should be true", theater.currentlyShowingMovies.contains("Napleon Dynamite"));
        assertTrue("Should be true", theater.currentlyShowingMovies.contains("Being John Malkovich"));

        theater.removeMovie("Being John Malkovich");
        assertEquals("Should be 1", 1, theater.currentlyShowingMovies.size());
        assertFalse("Should be false", theater.currentlyShowingMovies.contains("The Secret Life of Walter Mitty"));
        assertFalse("Should be false", theater.currentlyShowingMovies.contains("Being John Malkovich"));
        assertTrue("Should be true", theater.currentlyShowingMovies.contains("Napleon Dynamite"));
    }

    @Test
    public void testTheaterAddReview() {
        Theater theater = new Theater("AMC Lennox 24");

        theater.addReview(new Review("The auditorium was too hot", 2, "Achilles Warrior of Greece"));
        assertEquals("Should be 1", 1, theater.reviews.size());

        theater.addReview(new Review("The auditorium was too cold", 2, "Hector Warrior of Troy"));
        assertEquals("Should be 2", 2, theater.reviews.size());

        theater.addReview(new Review("Wow", 2, "Owen Wilson"));
        assertEquals("Should be 3", 3, theater.reviews.size());
    }
}
